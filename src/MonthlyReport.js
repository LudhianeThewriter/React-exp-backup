import React, { useState, useRef, useContext, useEffect, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { Bar, Line } from "react-chartjs-2";
import html2canvas from "html2canvas";
import GSTInvoicePDF from "./ExportBill";
import jsPDF from "jspdf";
import { useExpenses } from "./ExpenseContext";
import { AuthContext } from "./AuthContext";
import { filterBudgetData } from "./MonthUtility";
import { useBudgetData } from "./BudgetContext";
import PricingPlans from "./Price";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import SideBar from "./UserSideBar";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

ChartJS.defaults.devicePixelRatio = 2;

const MonthlyReport = () => {
  const reportRef = useRef(null);
  const { expenses } = useExpenses();
  const { budgetData } = useBudgetData();
  const [enrichedBudget, setEnrichedBudget] = useState([]);
  const [filterExpenses, setFilterEexpenses] = useState([]);
  const [filterMonth, setFilterMonth] = useState(
    new Date().toISOString().slice(0, 7)
  );
  const { user, loading, userInfo } = useContext(AuthContext);
  const navigate = useNavigate();
  const [top3Exp, setTop3Exp] = useState([]);
  const totalExp = useMemo(() => {
    return filterExpenses.reduce(
      (sum, exp) => sum + Number(exp.amount || 0),
      0
    );
  }, [filterExpenses]);

  const budgetAmount = useMemo(() => {
    return enrichedBudget.reduce(
      (sum, exp) => sum + Number(exp.budget || 0),
      0
    );
  }, [enrichedBudget]);

  const actualAmount = useMemo(() => {
    return enrichedBudget.reduce(
      (sum, exp) => sum + Number(exp.actual || 0),
      0
    );
  }, [enrichedBudget]);

  const { overBudget, underBudget, metBudget } = useMemo(() => {
    let over = 0;
    let under = 0;
    let met = 0;
    enrichedBudget.forEach(({ actual, budget }) => {
      const actualVal = Number(actual);
      const budgetVal = Number(budget);

      if (actualVal > budgetVal) {
        over += 1;
      } else if (actualVal < budgetVal) {
        under += 1;
      } else {
        met += 1;
      }
    });

    return { overBudget: over, underBudget: under, metBudget: met };
  });

  const getUtilization = (actual, budget) =>
    Math.round((actual / budget) * 100);

  useEffect(() => {
    if (!loading && !user) {
      navigate("/user");
    }
  }, [user, loading, userInfo]);

  // filter expense list
  function filterExpenseData() {
    const filterExp = expenses.filter(({ date }) => {
      const d = new Date(date).toISOString().slice(0, 7);
      return filterMonth == "" || filterMonth == d;
    });

    return filterExp;
  }

  // Filter and merging actual expense in budget data

  const handleDownloadPDF = async () => {
    const input = reportRef.current;

    if (!input) return;

    const originalWidth = input.style.width;
    const originalPadding = input.style.padding;

    input.style.width = "800px";
    input.style.padding = "20px";
    input.style.backgroundColor = "#fff";
    console.log("Target Div Element ", input);
    await new Promise((res) => setTimeout(res, 100));

    const canvas = await html2canvas(input, {
      scale: 3, // higher = better quality
      useCORS: true, // load external styles like Bootstrap
    });

    const imgData = canvas.toDataURL("image/png");
    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "px",
      format: "a4",
    });

    pdf.setFontSize(18);
    pdf.text(`Monthly Expense Report `, 40, 40);
    pdf.setFontSize(12);
    pdf.setTextColor(100);
    pdf.text(`Generated on ${new Date().toLocaleString()}`, 40, 60);

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    const imgWidth = pageWidth;
    const imgHeight = (canvas.height * pageWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    const yOffset = 80;
    pdf.addImage(imgData, "PNG", 0, yOffset, imgWidth, imgHeight);
    heightLeft -= pageHeight - yOffset;
    //  pdf.text("Generated by Expencer ", 40, pageHeight - 35);

    while (heightLeft > 0) {
      position = heightLeft - imgHeight + yOffset;
      pdf.addPage();
      pdf.addImage(imgData, "PNG", 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save("MonthlyReport.pdf");
    input.style.width = originalWidth;
    input.style.padding = originalPadding;
  };

  function formatDateToDMY(dateString) {
    const [year, month, day] = dateString.split("-");
    return `${day}-${month}-${year}`;
  }

  // Group Expenses
  function calculateTopExp() {
    const categoryDateMap = {};
    filterExpenses.forEach(({ category, date, amount }) => {
      const formatDate = formatDateToDMY(date);
      if (!categoryDateMap[category]) {
        categoryDateMap[category] = {};
      }

      if (!categoryDateMap[category][formatDate]) {
        categoryDateMap[category][formatDate] = 0;
      }

      categoryDateMap[category][formatDate] += Number(amount || 0);
    });

    const categoryTotals = Object.entries(categoryDateMap).map(
      ([category, dateMap]) => {
        const total = Object.values(dateMap).reduce((a, b) => a + b, 0);
        return { category, total, expenses: dateMap };
      }
    );

    const top3 = categoryTotals.sort((a, b) => b.total - a.total).slice(0, 3);
    setTop3Exp(top3);
  }

  useEffect(() => {
    const budResult = filterBudgetData(filterMonth, budgetData, expenses);
    setEnrichedBudget(budResult);

    const expResult = filterExpenseData();
    setFilterEexpenses(expResult);
  }, [filterMonth, budgetData, expenses]);

  useEffect(() => {
    calculateTopExp();
  }, [filterExpenses]);

  const allDates = useMemo(() => {
    const dates = Array.from(
      new Set(top3Exp.flatMap((cat) => Object.keys(cat.expenses)))
    );
    return dates.sort((a, b) => {
      const [d1, m1, y1] = a.split("-").map(Number);
      const [d2, m2, y2] = b.split("-").map(Number);
      return new Date(y1, m1 - 1, d1) - new Date(y2, m2 - 1, d2);
    });
  }, [top3Exp]);

  const [year, month] = filterMonth.split("-").map(Number);
  const days = new Date(year, month, 0).getDate();
  const fullDates = Array.from(
    { length: days },
    (_, i) =>
      `${String(i + 1).padStart(2, "0")}-${String(month).padStart(
        2,
        "0"
      )}-${year}`
  );

  return (
    <div className="container-fluid px-0">
      <div className="row g-0">
        <div className="col-md-2 bg-light" style={{ height: "100vh" }}>
          <SideBar />
        </div>

        <div className="col-md-10 p-4">
          <div className="d-flex justify-content-between align-items-center mb-3">
            <h2></h2>
            <button
              onClick={handleDownloadPDF}
              className="btn btn-sm btn-outline-primary"
            >
              Download PDF
            </button>
          </div>

          <div className="row mb-4">
            <div className="col-md-4">
              <input
                type="month"
                value={filterMonth}
                onChange={(e) => {
                  setFilterMonth(e.target.value);
                }}
                className="form-control"
              />
            </div>
          </div>
          <div ref={reportRef}>
            <div className="row mb-4">
              <h2>Expenses Summary</h2>
              <div className="col-md-3">
                <div className="card p-3 text-center">
                  <h6>Overall Expenses</h6>
                  <strong>₹{totalExp}</strong>
                </div>
              </div>
              <div className="col-md-3">
                <div className="card p-3 text-center">
                  <h6>Budgeted / Actual Expense</h6>
                  <strong>
                    ₹ {budgetAmount} / {actualAmount}{" "}
                  </strong>
                </div>
              </div>
              <div className="col-md-3">
                <div className="card p-3 text-center">
                  <h6>Over Budget</h6>
                  <strong>{overBudget}</strong>
                </div>
              </div>
              <div className="col-md-3">
                <div className="card p-3 text-center">
                  <h6>Under Budget</h6>
                  <strong>{underBudget}</strong>
                </div>
              </div>
              <div className="col-md-3">
                <div className="card p-3 text-center">
                  <h6>Achieve Budget</h6>
                  <strong>{metBudget}</strong>
                </div>
              </div>
            </div>

            <table className="table table-bordered mt-3">
              <thead className="table-secondary">
                <tr>
                  <th>Date</th>
                  <th>Category</th>
                  <th>Amount (Rs)</th>
                  <th>Remarks</th>
                </tr>
              </thead>
              <tbody>
                {filterExpenses.length > 0
                  ? filterExpenses.map(
                      ({ date, category, amount, remarks }) => (
                        <tr>
                          <td>{formatDateToDMY(date)}</td>
                          <td>{category}</td>
                          <td>{amount}</td>
                          <td>{remarks}</td>
                        </tr>
                      )
                    )
                  : "No expense recorded yet."}
              </tbody>
            </table>

            <h4 className="mt-5">Compare with Budget</h4>
            <div className="row">
              {enrichedBudget.map(({ category, actual, budget }) => {
                const barData = {
                  labels: ["Actual", "Budget"],
                  datasets: [
                    {
                      label: "Amount",
                      data: [actual, budget],
                      backgroundColor: ["#007bff", "#28a745"],
                    },
                  ],
                };
                const options = {
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: { legend: { display: false } },
                  scales: { y: { beginAtZero: true } },
                };
                return (
                  <div className="col-md-3" key={category}>
                    <div className="card text-center p-3">
                      <h6 className="card-title">{category}</h6>
                      <div style={{ width: "100%", height: "200px" }}>
                        <Bar data={barData} options={options} />
                      </div>
                      <p
                        className={
                          actual > budget ? "text-danger" : "text-success"
                        }
                      >
                        {actual > budget
                          ? "Budget Crossed"
                          : actual < budget
                          ? "Under Budget"
                          : "Met Budget"}
                      </p>
                      <small>Usage: {getUtilization(actual, budget)}%</small>
                    </div>
                  </div>
                );
              })}
            </div>

            <h4 className="mt-5">Major Expenses in Overall Month</h4>
            <div className="row">
              <div className="col-12">
                {top3Exp.map((cat, idx) => {
                  const chartData = {
                    labels: fullDates.map((d) => d.split("-")[0]),
                    datasets: [
                      {
                        label: cat.category,
                        data: fullDates.map((date) => cat.expenses[date] || 0),
                        borderColor: ["#FF6384", "#36A2EB", "#FFCE56"][idx],
                        tension: 0.4,
                        fill: false,
                      },
                    ],
                  };

                  return (
                    <div className="col-md-5 mb-4" key={cat.category}>
                      <div className="card p-3">
                        <Line
                          data={chartData}
                          options={{
                            responsive: true,
                            plugins: {
                              title: { display: true, text: cat.category },
                            },
                            scales: {
                              y: {
                                beginAtZero: true,
                                title: { display: true, text: "₹" },
                              },
                              x: { title: { display: true, text: "Day" } },
                            },
                          }}
                        />
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
          <h5 className="mt-4">Notes</h5>
          <p>"Extra food expenses due to party."</p>
          <GSTInvoicePDF />
        </div>
      </div>
    </div>
  );
};

export default MonthlyReport;
